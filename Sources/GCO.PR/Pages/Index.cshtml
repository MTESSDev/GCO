@page "{handler?}"
@model GCO.PR.Pages.GCOIndexModel
@{
    ViewData["Title"] = "Liste des gabarits";
    ViewData["CacherIdentification"] = true;
    ViewData["CacherOnglets"] = true;
    ViewData["CacherLien"] = true;
    ViewData["CacherChangementLangue"] = true;
}

@section style{
    <style>

        #tableGabarits td.lien {
            padding: 0;
        }

        #tableGabarits td.lien a {
            display: flex;
            flex-direction: column;
            justify-content: center;
            text-decoration: none;
            padding: 16px 16px 16px 8px;
        }

        #tableGabarits .objet {
            font-family: 'OpenSans-Bold';
            color: var(--couleur-texte-liens);
        }

        #tableGabarits .description{
            font-family: 'OpenSans-Regular';
            color: var(--couleur-texte-base);

        }

        #tableGabarits a:hover .objet, #tableGabarits a:focus .objet {
            text-decoration: underline;
        }

    </style>
}

    <div>

        <table id="tableGabarits" summary="Liste des gabarits disponibles" class="table table-hover base">
            <thead>
                <tr>
                    <th class="">Gabarit</th>
                </tr>
            </thead>
            <tbody>
            </tbody>
        </table>
    </div>

@section scripts{

    <script>

        ajouterGabaritsTableau()
        definirDatatable()


        function ajouterGabaritsTableau(){

            const gabarits = obtenirGabarits()
            const sansDescription = "Aucune description disponible."
            let html

            gabarits.forEach((g) => {
                html += `
                <tr>
                    <td class="lien">
                    <a href="/Correspondance?c=${g.code}">
                        <span class="objet">${g.code}<span class="sr-only">.&nbsp;</span></span>
                        <span class="description text-base">${g.desc || sansDescription}</span>
                    </a>
                    </td>
                </tr>`
            })

            $("#tableGabarits").find("tbody").append(html)
        }

        function definirDatatable(){
            const tableGabarits = $("#tableGabarits");

            const table = tableGabarits.DataTable({
                pageLength: 10,
                paging: true,
                searching: true,
                columnDefs: [
                    {
                        targets: 0, render: function (data, type, row) {
                            //Traitement particulier pour le tri. Ne pas conserver la date dans la cellule si la date est invisible (bousille l'ordre de tri par objet)
                            if (type === 'sort') {
                                var contenuCellule = $(data);
                                if (contenuCellule.find(".date:visible").length === 0) {
                                    contenuCellule.find(".date").remove();
                                }
                                return contenuCellule.text();
                            }

                            return data;
                        }
                    }
                ],
                order: [
                    [0, "asc"]
                ]
            });


            table.on( 'draw', function () {
                const body = $( table.table().body() ); 
                body.unhighlight();
                body.highlight( table.search() );  
            });
        }
       
    </script>

}